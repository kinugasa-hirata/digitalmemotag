Solutions for Key Challenges:
1. Multiple QR Codes Issue:
Instead of generating unique QR codes for each product, consider using a single QR code that leads to a main page where users can select their specific item/location. You could:

Use a master QR code + simple item ID system (user scans, then enters "Item A", "Machine 3", etc.)
Create QR codes with URL parameters (same base URL but with ?item=machineA endings)
Use a hierarchical system (one QR for the workshop, then users select specific equipment)

2. Technical Stack Recommendation:
Your Python + Streamlit + GitHub approach is solid for a lightweight solution. Here's a refined architecture:

Backend: Simple Flask/FastAPI app
Database: SQLite (lightweight) or even JSON files stored in GitHub
Frontend: Streamlit for quick deployment
Hosting: Streamlit Cloud (free) or Heroku
Storage: GitHub repository for persistence

3. Message Board Features:
For the Twitter-like functionality you described:

Timestamp-based sorting (newest first)
Simple text blocks with optional user identification
No authentication initially (as you specified)
Basic threading or reply system could be useful

Additional Suggestions:

Consider adding photo upload capability for visual instructions
Include a simple "status" system (Working/Needs Attention/Fixed)
Add basic moderation tools (delete inappropriate posts)
Consider offline backup (QR could also link to a simple text version)

Potential Concerns:

Without authentication, spam/misuse is possible
Consider basic rate limiting
Think about data retention policies
May want emergency contact info always visible